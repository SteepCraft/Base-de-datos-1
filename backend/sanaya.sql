-- ============================================================
-- Inicialización simplificada del esquema (Oracle)
-- - Borra tablas si existen
-- - Crea tablas normalizadas
-- - Agrega constraints relevantes junto a cada tabla (PK/UNIQUE/CHECK)
-- - Finalmente (sección FKs) añade las claves foráneas
-- ============================================================

/* ---------------------------
   1) Eliminar tablas si existen (Oracle-safe)
   --------------------------- */
BEGIN
  -- Lista explícita para evitar borrar otras tablas por accidente
  FOR t IN (
    SELECT table_name FROM user_tables
    WHERE table_name IN (
      'DETALLE_VENTA','DETALLE_COMPRA','SUMINISTROS','INVENTARIO',
      'VENTAS','COMPRAS','PRODUCTO','PROVEEDOR','CLIENTE','USUARIO'
    )
  ) LOOP
    EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS PURGE';
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    NULL; -- ignorar si alguna no existe o falla
END;
/
COMMIT;

-- ---------------------------
-- 2) CREAR TABLAS (columnas)
-- ---------------------------

-- CLIENTE
CREATE TABLE cliente (
  id        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  nombres   VARCHAR2(50)   NOT NULL,
  apellidos VARCHAR2(50)   NOT NULL,
  direccion VARCHAR2(50),
  telefono  VARCHAR2(15)
);

ALTER TABLE cliente ADD CONSTRAINT unq_cliente_telefono UNIQUE (telefono);


-- PRODUCTO
CREATE TABLE producto (
  codigo          NUMBER PRIMARY KEY,
  descripcion     VARCHAR2(100) NOT NULL,
  precio          NUMBER(10,2)  NOT NULL,
  num_existencia  NUMBER DEFAULT 0
);

ALTER TABLE producto ADD CONSTRAINT chk_producto_precio_pos CHECK (precio > 0);


-- PROVEEDOR
CREATE TABLE proveedor (
  id          VARCHAR2(10) PRIMARY KEY,
  nombres     VARCHAR2(50) NOT NULL,
  apellidos   VARCHAR2(50) NOT NULL,
  direccion   VARCHAR2(50),
  providencia VARCHAR2(50),
  telefono    VARCHAR2(15)
);

ALTER TABLE proveedor ADD CONSTRAINT unq_proveedor_telefono UNIQUE (telefono);


-- VENTAS
CREATE TABLE ventas (
  codigo      NUMBER PRIMARY KEY,
  id_cliente  NUMBER,                -- FK -> cliente(id)
  fecha_venta DATE DEFAULT SYSDATE,
  valor_tot   NUMBER(10,2)
);

ALTER TABLE ventas ADD CONSTRAINT chk_ventas_valor_tot_pos CHECK (valor_tot > 0);


-- DETALLE_VENTA
CREATE TABLE detalle_venta (
  venta_codigo     NUMBER,            -- FK -> ventas.codigo
  codigo_producto  NUMBER,            -- FK -> producto.codigo
  cant_venta       NUMBER DEFAULT 1,
  precio_producto  NUMBER(10,2) NOT NULL
);

ALTER TABLE detalle_venta ADD CONSTRAINT pk_detalle_venta PRIMARY KEY (venta_codigo, codigo_producto);
ALTER TABLE detalle_venta ADD CONSTRAINT chk_detalle_venta_precio_pos CHECK (precio_producto > 0);


-- COMPRAS
CREATE TABLE compras (
  codigo        NUMBER PRIMARY KEY,
  fecha_compra  DATE DEFAULT SYSDATE,
  id_proveedor  VARCHAR2(10),         -- FK -> proveedor.id
  tot_compras   NUMBER(10,2)
);

ALTER TABLE compras ADD CONSTRAINT chk_compras_tot_pos CHECK (tot_compras > 0);


-- DETALLE_COMPRA
CREATE TABLE detalle_compra (
  codigo_compra   NUMBER,             -- FK -> compras.codigo
  codigo_producto NUMBER,             -- FK -> producto.codigo
  cant_compras    NUMBER DEFAULT 1,
  precio_unit     NUMBER(10,2) NOT NULL
);

ALTER TABLE detalle_compra ADD CONSTRAINT pk_detalle_compra PRIMARY KEY (codigo_compra, codigo_producto);
ALTER TABLE detalle_compra ADD CONSTRAINT chk_detalle_compra_precio_unit_pos CHECK (precio_unit > 0);


-- INVENTARIO
CREATE TABLE inventario (
  codigo_producto NUMBER PRIMARY KEY,              -- FK -> producto.codigo
  stock_actual    NUMBER DEFAULT 0,
  stock_inicio    NUMBER DEFAULT 0,
  stock_final     NUMBER DEFAULT 0,
  fecha_regis     DATE DEFAULT SYSDATE
);

-- Aquí queremos una PK sobre codigo_producto (un registro por producto)
ALTER TABLE inventario ADD CONSTRAINT chk_inventario_stock_nonneg CHECK (stock_actual >= 0 AND stock_inicio >= 0 AND stock_final >= 0);


-- SUMINISTROS (proveedor <-> producto)
CREATE TABLE suministros (
  id_proveedor    VARCHAR2(10),
  codigo_producto NUMBER
);

ALTER TABLE suministros ADD CONSTRAINT pk_suministros PRIMARY KEY (id_proveedor, codigo_producto);
-- NOTA: no se añade UNIQUE en codigo_producto para permitir múltiples proveedores por producto.

-- USUARIO
CREATE TABLE usuario (
  id          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  email       VARCHAR2(100) NOT NULL,
  contrasena  VARCHAR2(255) NOT NULL,
  nombres     VARCHAR2(50) NOT NULL,
  apellidos   VARCHAR2(50) NOT NULL,
  telefono    VARCHAR2(15),
  foto_perfil VARCHAR2(255),
  estado      NUMBER(1) DEFAULT 1 CHECK (estado IN (0, 1)) -- 0: inactivo, 1: activo
);

ALTER TABLE usuario ADD CONSTRAINT unq_usuario_email UNIQUE (email);
ALTER TABLE usuario ADD CONSTRAINT unq_usuario_telefono UNIQUE (telefono);

-- ---------------------------
-- 3) RE-AÑADIR CLAVES FORÁNEAS (FKs)
-- ---------------------------

ALTER TABLE ventas ADD CONSTRAINT fk_ventas_cliente FOREIGN KEY (id_cliente)
  REFERENCES cliente(id);

ALTER TABLE detalle_venta ADD CONSTRAINT fk_detventa_venta FOREIGN KEY (venta_codigo)
  REFERENCES ventas(codigo);

ALTER TABLE detalle_venta ADD CONSTRAINT fk_detventa_producto FOREIGN KEY (codigo_producto)
  REFERENCES producto(codigo);

ALTER TABLE compras ADD CONSTRAINT fk_compras_proveedor FOREIGN KEY (id_proveedor)
  REFERENCES proveedor(id);

ALTER TABLE detalle_compra ADD CONSTRAINT fk_detcompra_compras FOREIGN KEY (codigo_compra)
  REFERENCES compras(codigo);

ALTER TABLE detalle_compra ADD CONSTRAINT fk_detcompra_producto FOREIGN KEY (codigo_producto)
  REFERENCES producto(codigo);

ALTER TABLE inventario ADD CONSTRAINT fk_inventario_producto FOREIGN KEY (codigo_producto)
  REFERENCES producto(codigo);

ALTER TABLE suministros ADD CONSTRAINT fk_suministros_proveedor FOREIGN KEY (id_proveedor)
  REFERENCES proveedor(id);

ALTER TABLE suministros ADD CONSTRAINT fk_suministros_producto FOREIGN KEY (codigo_producto)
  REFERENCES producto(codigo);

-- Fin del script
